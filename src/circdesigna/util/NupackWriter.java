package circdesigna.util;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import circdesigna.DomainDefinitions;
import circdesigna.DomainPolymerGraph;
import circdesigna.DomainSequence;
import circdesigna.config.CircDesigNAConfig;
import circdesigna.config.CircDesigNASystemElement;

/**
 * Converts a domain specification and molecules specification in CircDesigNA's format
 * to the multiobjective design specification of Nupack.
 */
public class NupackWriter extends CircDesigNASystemElement{
	private String moleculeSpecs;
	private String domainSpecs;
	public NupackWriter(CircDesigNAConfig cfg, String domainSpecs, String moleculeSpecs){
		super(cfg);
		this.domainSpecs = domainSpecs;
		this.moleculeSpecs = moleculeSpecs;
	}
	public static void main(String[] args) throws IOException{
		CircDesigNAConfig cfg = new CircDesigNAConfig();
		String domainDefs = null;
		String moleculeDefs = null;
		String outputFile = null;
		double stopCondition = 1;
		int i = 0;
		for(; i < args.length; i++){
			if (args[i].equals("--material")){
				i++;
				if (args[i].equalsIgnoreCase("dna")){
					cfg.setMode(CircDesigNAConfig.DNA_MODE);
				} else
				if (args[i].equalsIgnoreCase("rna")){
					cfg.setMode(CircDesigNAConfig.RNA_MODE);
				} else {
					throw new RuntimeException("Unrecognized material: " + args[i]);
				}
			} else if (args[i].equals("--stop")){
				i++;
				stopCondition = new Double(args[i]);
			} else if (args[i].equals("-d")){
				i++;
				domainDefs = readCompletely(args[i]);
			} else if (args[i].equals("-m")){
				i++;
				moleculeDefs = readCompletely(args[i]);
			} else if (args[i].equals("-o")){
				i++;
				outputFile = args[i];
			}
		}
		
		if (domainDefs == null || moleculeDefs == null || outputFile == null){
			printUsage();
			System.exit(1);
		}
		NupackWriter converter = new NupackWriter(cfg, domainDefs, moleculeDefs);
		PrintWriter out = new PrintWriter(new File(outputFile));
		converter.toNupack(out, stopCondition);
		out.close();
	}
	private static void printUsage() {
		System.out.println("Usage: java "+NupackWriter.class+" [--material <dna / rna>] [--stop <stop value>] -d <domains> -m <molecules> -o <outputfile>");
		System.out.println("\t This class converts a system specified in CircDesigNA syntax to Nupack's Multiobjective Design syntax.");
		System.out.println("\t-d : Specify a file containing the domain specifications of the system");
		System.out.println("\t-m : Specify a file containing the molecule specifications of the system");
		System.out.println("\t-o : Specify a file to hold the output Nupack multiobjective design specification");
		System.out.println("\t--stop : Specify the defect stop condition for all molecules, used in Nupack's designer. Defaults to 1%");
		System.out.println("\t--material : Specify dna or rna design");
	}
	private static String readCompletely(String filename) {
		try {
			Scanner in = new Scanner(new File(filename));
			StringBuffer sb = new StringBuffer();
			while(in.hasNextLine()){
				sb.append(in.nextLine());
				sb.append("\n");
			}
			return sb.toString();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Outputs the nupack specification to printwriter out
	 */
	private void toNupack(PrintWriter out, double stopCondition) {
		//Nupack does not allow domain names like "1" or "2" . So, append a prefix.
		String domainPrefix = "d_";
		
		out.println("#");
		out.println("# Autogenerated Nupack multiobjective specification from CircDesigNA syntax");
		out.println("#");
		out.println("");
		out.printf("material = %s",Std.monomer); out.println();
		out.printf("temperature = %f",37.0); out.println();
		out.printf("trials = %d",3); out.println();
		
		DomainDefinitions dsd = new DomainDefinitions(Std);
		DomainDefinitions.readDomainDefs(domainSpecs, dsd);

		out.println("");
		out.println("#");
		out.println("# sequence domains");
		out.println("#");
		out.println("");
		for(int i = 0; i < dsd.domainLengths.length; i++){
			out.printf("domain %s = %s", domainPrefix + dsd.getDomainName(i), dsd.getConstraint(i)); out.println();
		}

		Scanner in = new Scanner(moleculeSpecs);
		out.println("");
		out.println("#");
		out.println("# target structures");
		out.println("#");
		out.println("");
		while(in.hasNextLine()){
			String molecule = in.nextLine().trim();
			if (molecule.equals("")){
				continue;
			}
			DomainPolymerGraph molecule_ = new DomainPolymerGraph(dsd);
			DomainPolymerGraph.readStructure(molecule, molecule_);
			List<Integer> domainList = new ArrayList();
			
			String molName = "mol_"+molecule_.getMoleculeName(); //add prefix to avoid domain / molecule name collisions
			//Sanitize molName
			molName = molName.replaceAll("['\\.\\*]","_");
			
			out.printf("structure %s = ",molName);
			for(int i = 0; i < molecule_.length(); i++){
				int dAtI = molecule_.getDomain(i);
				if (dAtI >= 0){
					domainList.add(dAtI);
					int pair = molecule_.getDomainPair(i);
					if (pair < 0){
						//Unpaired
						out.printf("U%d ", dsd.getDomainLength(dAtI));
					} else {
						//Paired
						if (pair < i){
							//Close parens
							out.printf(") ");
						} else {
							//Open parens
							out.printf("D%d ( ", dsd.getDomainLength(dAtI));
						}
					}
				} else {
					if (i + 1 < molecule_.length()){
						out.printf("+ "); //A 3' end, but not the last one.
					}
				}
			}
			out.println();
			
			//Thread sequence domains...
			DomainSequence domainThread = new DomainSequence();
			domainThread.setDomains(domainList, null);
			String plainDomainOutput = domainThread.toString(dsd);
			//Append the domain prefix to all domains in the list
			out.printf("%s.seq = ", molName);
			for(String dom : plainDomainOutput.split("\\s+")){
				out.printf("%s ", domainPrefix+dom);
			}
			out.println();
			
			//State the stop condition for this molecule.
			out.printf("%s.stop = %f", molName, stopCondition);
			out.println();
		}
	}
}

